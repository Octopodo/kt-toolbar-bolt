(function() {

function directions() {
  return {
    top: -1,
    bottom: 1,
    left: -1,
    right: 1,
    }
}

var underscoreEach = _.each,
    underscoreFind = _.find;
function forEach(list, iteratee, context) {
   
  if(isCollection(list)) {
    var i = 1, len = list.length;
    for(; i <= len; i++) {
      iteratee(list[i], i, list)
    }
  } else {
    underscoreEach(list, iteratee, context)
  }
}

function collectionFind(list, predicate, context) {
if(isCollection(list)) {
    var i = 1, len = list.length;
    for(; i <= len; i++) {
      var item = predicate(list[i], i, list)
      if(item === true) {
        return list[i]
      }
    }
  } else {
    return underscoreFind(list, predicate, context)
  }

}


function hasKeys(property) {
  return !_.isPropertyGroup(property) && property.canVaryOverTime != undefined && property.canVaryOverTime && property.numKeys > 0
}


function isArray(item) {
  return item instanceof Array
}

function isCollection(source) {
  var isCollection =  source instanceof ItemCollection 
    || source instanceof LayerCollection 
    || source instanceof OMCollection 
    || source instanceof RQItemCollection
    || false 
  return isCollection 
}


/**Checkif an item is audio footage
* @function getAudio
* @memberof KT.Project
* @param {Item} item - The item to check
* @returns {Boolean} 
*/
function isAudio(item) {
  return !(item instanceof CompItem) && item instanceof FootageItem && item.hasAudio && !item.hasVideo;
};

function filterSize(value) {
  var value = ternary(value < -30000, -30000,
    value > 30000, 30000,
    value)
  return value;
}
/**Checkif an item is a comp
* @function isComp
* @memberof KT.Project
* @param {Item} item - The item to check
* @returns {Boolean} 
*/
function isComp(item) {
  return item instanceof CompItem;
};


/**Checkif an item is a folder item
* @function isFolder
* @memberof KT.Project
* @param {Item} item - The item to check
* @returns {Boolean} 
*/
function isFolder(item) {
  return item instanceof FolderItem;
};


/**Checkif an item is an image footage
* @function isImage
* @memberof KT.Project
* @param {Item} item - The item to check
* @returns {Boolean} 
*/
function isImage(item) {
  return !(item instanceof CompItem) && item instanceof FootageItem && !item.hasAudio && item.hasVideo && item.duration === 0; 
  //item.mainSource != undefined && item.mainSource.isStill;
};


/**Checkif an item is video footage
* @function isVideo
* @memberof KT.Project
* @param {Item} item - The item to check
* @returns {Boolean} 
*/
function isVideo(item) {
  return !(item instanceof CompItem) && item instanceof FootageItem &&  item.hasVideo && item.duration > 0;
};


/**Checkif an item is an item
* @function isItem
* @memberof KT.Project
* @param {Item} item - The item to check
* @returns {Boolean} 
*/
function isItem(item) {
  return isAudio(item) || isComp(item)  || isImage(item) || isVideo(item); 
};

function isProperty(property) {
  var isProp = (property instanceof Property || property instanceof PropertyGroup || property instanceof MaskPropertyGroup);
  return isProp
}

function isPropertySource(source) {
  return isLayer(source) || isProperty(source)
}

function isPropertyGroup(property) {
  return property instanceof PropertyGroup || property instanceof MaskPropertyGroup || isLayer(property)
}

function isLayer (layer) {
  return layer !== null && layer && layer.nullLayer !== undefined
}

function isLayerCollection(item) {
  return item instanceof LayerCollection 
}

function isTextLayer(layer) {
  return layer instanceof TextLayer
}

function isCameraLayer(layer) {
  return layer instanceof CameraLayer
}

function isLightLayer(layer) {
  return layer instanceof LightLayer
}

function isAVLayer(layer) {
  return layer instanceof AVLayer
}

function isSolidLayer(layer) {
  return isAVLayer(layer) && layer.source.mainSource instanceof SolidSource
}

function isFootageLayer(layer) {
  return isAVLayer(layer) && layer.source.mainSource instanceof FootageSource
}

function isCompLayer(layer) {
  return isComp(layer.source)
}

function isNullLayer(layer) {
  return layer.nullLayer === true
}

function isAdjustmentLayer(layer) {
  return layer.adjustmentLayer
}

function isShapeLayer (layer) {
  return layer instanceof ShapeLayer
}

function isAudioLayer (layer) {
  return _.isAVLayer(layer) && _.isAudio(layer.source)
}

function swapArray(arr, index_A, index_B) {
  var temp = arr[index_A];
  this[index_A] = arr[index_B];
  this[index_B] = temp;
  return arr;
}




/**
  * {JSDoc}
  *
  * The splice() method changes the content of a string by removing a range of
  * characters and/or adding new characters.
  *
  * @this {String}
  * @param {number} start Index at which to start changing the string.
  * @param {number} delCount An integer indicating the number of old chars to remove.
  * @param {string} newSubStr The String that is spliced in.
  * @return {string} A new string with the spliced substring.
  */
function spliceString(start, delCount, newSubStr) {
  return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));
};


//TODO: make real camelcase/
function toCamelCase(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
}
  

//TODO: make real camelcase/
function toClassCase(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
  

/** Sorts an array with the quick sort algorithm
* @function quickSort
* @memberof KT
* @param {Array} arr - The array to sort
* @returns A new sorted array
*/
function quickSort(arr) {
  if (arr.length <= 1) {
    return arr;
  } else {
    var left = [],
        right = [],
        newArray = [],
        pivot = arr.pop(),
        length = arr.length,
        i = 0;

    for (; i < length; i++) {
      if (arr[i] <= pivot) {
        left.push(arr[i]);
      } else {
        right.push(arr[i]);
      }
    }

    return newArray.concat(quickSort(left), pivot, quickSort(right));
  }
}

  
/** Shuffles the order of the items in an array
* @function shuffleArray
* @memberof KT
* @param {Array} arr - The array
* @returns The same array with shuffled items
*/
function shuffleArray(arr) {
  if(_.isArray(arr) || arr.length < 1) return;

  var i = arr.length - 1,
      j = 0,
      temp;

  for (; i >= 0; i--) {
    j = Math.floor(Math.random() * (i + 1));
    temp = arr[i];
    arr[i] = arr[j];
    arr[j] = arr;
  }
  return array;
}


  /**/
function validateInput (value, length) {
  var _length_ = (!length) ? 2 : length,
      newVal = value.toString(),
      length = newVal.length,
      numZeros,
      i = 0;

  if (newVal.length < _length_) {
    numZeros = _length_ - newVal.length;

    for (; i < numZeros; i++) {
      newVal = "0" + newVal;
    }

    return newVal;
  } else {
    return newVal;
  }
}


    /**/
function randomIntList(length, min, max) {
  var min = (!min) ? 0 : min,
      max = (!max) ? 0 : max,
      list = [],
      i = 0

  for (i = 0; i < length; i++) {
    list.push(_.random(min, max));
  }
  return list
}


function stringToArray (str) {
 

  var arr = _.isArray(str) ? 'isArray'
            : _.isString(str) ?  'isString'
            : 'none'
  newArr = _.filter(arr, function(item) { return _.isString(item)})

  return arr
}


function stringToArray (str) {
  var arr = ternary(_.isArray(str) , str,
              _.isString(str) ,  [str],
              []
            );
  return arr
}



function ternary() {
  if(arguments.length < 4) return;
  var i = 0,
      len = arguments.length;

  for (;i < len; i += 2) {
    if(arguments[i] === undefined) break;
    if(arguments[i] === true) return arguments[i + 1];
  }
  return arguments[len - 1]
}

function toRegExp(source, flags) {
  var source = stringToArray(source),
      source = source.length > 0 ? new RegExp(source.join('|'), flags || '') : null;

  return source
}

function toCallback(callback) {
  var callback = _.isFunction(callback) ? callback :  function(item) {return item};
  return callback
}

function toCondition(condition, defaultValue) {
  var defaultValue = _.isBoolean(defaultValue) ? defaultValue : true,
      condition = _.isFunction(condition) ? condition:  function() {return defaultValue};
  return condition
}


function formatInteger(number, length) {
  var number = number.toString(),
      zeros = "",
      i = 0;

  for(; i < length; i++) { zeros = zeros + "0"}
  
  number = (zeros + number).slice(-length);
  return number
  
}



function is2DVector(tuple){
  // Si la tupla tiene dos elementos, devolvemos true.
  if (!_.isArray(tuple)|| tuple.length < 2) {
    return false;
  }

  // Comprobamos que los dos elementos de la tupla sean nÃºmeros enteros.
  if (typeof tuple[0] !== "number" || typeof tuple[1] !== "number") {
    return false;
  }

  // Devolvemos true.
  return true;
}


/*
Tansform a direction: top-left-right-bottom to a 2D vector
*/
// function directionToVector(item) {
//   var vector =  !_.isString(item) ? vector : '';
//   x = vector.match(/(top|bottom)/i)
// }

function twoDVector(vector) {
  var vector = _.is2DVector(vector) ? vector : [0, 0];
  return vector
}




_.mixin({
  each: forEach,
  filterSize: filterSize, 
  find: collectionFind,
  formatInteger: formatInteger,
  hasKeys: hasKeys,
  is2DVector: is2DVector,
  isAdjustmentLayer: isAdjustmentLayer,
  isAudio: isAudio,
  isAudioLayer: isAudioLayer,
  isAVLayer: isAVLayer,
  isCameraLayer: isCameraLayer,
  isCollection: isCollection,
  isComp: isComp,
  isCompLayer: isCompLayer,
  isFolder: isFolder,
  isFootageLayer: isFootageLayer,
  isImage: isImage,
  isItem: isItem,
  isLayer: isLayer, 
  isLayerCollection: isLayerCollection,
  isLightLayer: isLightLayer,
  isNullLayer: isNullLayer,
  isProperty: isProperty,
  isPropertyGroup: isPropertyGroup,  
  isPropertySource: isPropertySource,
  isShapeLayer: isShapeLayer, 
  isSolidLayer: isSolidLayer,
  isTextLayer: isTextLayer,
  isVideo: isVideo,
  quickSort: quickSort,
  randomIntList: randomIntList,
  shuffle: shuffleArray,
  stringToArray: stringToArray,
  swap: swapArray,
  ternary: ternary,
  toCallback: toCallback,
  toCamelCase: toCamelCase,
  toClassCase: toClassCase,
  toCondition: toCondition,
  toRegExp: toRegExp,
  twoDVector: twoDVector,

})


})();